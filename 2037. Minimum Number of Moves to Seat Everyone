# There are n seats and n students in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat.
# You are also given the array students of length n, where students[j] is the position of the jth student.

# Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat.

# Input: seats = [3,1,5], students = [2,7,4] Output: 4

class Solution:
    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:
        seats = sorted(seats)
        students = sorted(students)
    
        i = j = 0
        total = 0
        while i < len(seats):
            total += abs(seats[i]-students[j])
            i+=1
            j+=1
        return total
        
class Solution:
    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:
        seats.sort()
        students.sort()
        return sum(abs(seat - student) for seat, student in zip(seats, students))
        
class Solution:
    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:
        seats_cnt, students_cnt = [0] * (max(seats) + 1), [0] * (max(students) + 1)
        for seat in seats:
            seats_cnt[seat] += 1
        for student in students:
            students_cnt[student] += 1
        ans = 0
        i = j = 1
        while i < len(students_cnt):
            if students_cnt[i]:
                # find the next available seat
                while j < len(seats_cnt) and not seats_cnt[j]:
                    j += 1
                ans += abs(i - j)
                seats_cnt[j] -= 1
                students_cnt[i] -= 1
            else:
                i += 1
        return ans

# The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).
# For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.
# Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and 
# (nums[y], nums[z]) is maximized.
# Return the maximum such product difference.

class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        min1 = min2 = float('inf')
        max1 = max2 = float('-inf')
        for n in nums:
            if n <= min1:
                min1, min2, = n, min1
            elif n < min2:
                min2 = n
            if n >= max1:
                max1, max2 = n, max1
            elif n > max2:
                max2 = n
        return max1*max2-min1*min2
        
class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        a = max(nums)
        c = min(nums)
        nums.remove(a)
        nums.remove(c)
        b = max(nums)
        d = min(nums)
        return (a*b)-(c*d)
        
class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        nums.sort()
        return (nums[-1]*nums[-2])-(nums[0]*nums[1])
